// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package useCase

import (
	"github.com/go-park-mail-ru/2019_2_CoolCode/models"
	"sync"
)

var (
	lockChatsUseCaseMockCheckChatPermission   sync.RWMutex
	lockChatsUseCaseMockContains              sync.RWMutex
	lockChatsUseCaseMockCreateChannel         sync.RWMutex
	lockChatsUseCaseMockCreateWorkspace       sync.RWMutex
	lockChatsUseCaseMockDeleteChannel         sync.RWMutex
	lockChatsUseCaseMockDeleteChat            sync.RWMutex
	lockChatsUseCaseMockDeleteWorkspace       sync.RWMutex
	lockChatsUseCaseMockEditChannel           sync.RWMutex
	lockChatsUseCaseMockEditWorkspace         sync.RWMutex
	lockChatsUseCaseMockGetChannelByID        sync.RWMutex
	lockChatsUseCaseMockGetChatByID           sync.RWMutex
	lockChatsUseCaseMockGetChatsByUserID      sync.RWMutex
	lockChatsUseCaseMockGetWorkspaceByID      sync.RWMutex
	lockChatsUseCaseMockGetWorkspacesByUserID sync.RWMutex
	lockChatsUseCaseMockLogoutFromChannel     sync.RWMutex
	lockChatsUseCaseMockLogoutFromWorkspace   sync.RWMutex
	lockChatsUseCaseMockPutChat               sync.RWMutex
)

// Ensure, that ChatsUseCaseMock does implement ChatsUseCase.
// If this is not the case, regenerate this file with moq.
var _ ChatsUseCase = &ChatsUseCaseMock{}

// ChatsUseCaseMock is a mock implementation of ChatsUseCase.
//
//     func TestSomethingThatUsesChatsUseCase(t *testing.T) {
//
//         // make and configure a mocked ChatsUseCase
//         mockedChatsUseCase := &ChatsUseCaseMock{
//             CheckChatPermissionFunc: func(userID uint64, chatID uint64) (bool, error) {
// 	               panic("mock out the CheckChatPermission method")
//             },
//             ContainsFunc: func(Chat models.Chat) error {
// 	               panic("mock out the Contains method")
//             },
//             CreateChannelFunc: func(channel *models.Channel) (uint64, error) {
// 	               panic("mock out the CreateChannel method")
//             },
//             CreateWorkspaceFunc: func(room *models.Workspace) (uint64, error) {
// 	               panic("mock out the CreateWorkspace method")
//             },
//             DeleteChannelFunc: func(userID uint64, channelID uint64) error {
// 	               panic("mock out the DeleteChannel method")
//             },
//             DeleteChatFunc: func(userID uint64, chatId uint64) error {
// 	               panic("mock out the DeleteChat method")
//             },
//             DeleteWorkspaceFunc: func(userID uint64, workspaceID uint64) error {
// 	               panic("mock out the DeleteWorkspace method")
//             },
//             EditChannelFunc: func(userID uint64, channel *models.Channel) error {
// 	               panic("mock out the EditChannel method")
//             },
//             EditWorkspaceFunc: func(userID uint64, room *models.Workspace) error {
// 	               panic("mock out the EditWorkspace method")
//             },
//             GetChannelByIDFunc: func(userID uint64, ID uint64) (models.Channel, error) {
// 	               panic("mock out the GetChannelByID method")
//             },
//             GetChatByIDFunc: func(userID uint64, ID uint64) (models.Chat, error) {
// 	               panic("mock out the GetChatByID method")
//             },
//             GetChatsByUserIDFunc: func(ID uint64) ([]models.Chat, error) {
// 	               panic("mock out the GetChatsByUserID method")
//             },
//             GetWorkspaceByIDFunc: func(userID uint64, ID uint64) (models.Workspace, error) {
// 	               panic("mock out the GetWorkspaceByID method")
//             },
//             GetWorkspacesByUserIDFunc: func(ID uint64) ([]models.Workspace, error) {
// 	               panic("mock out the GetWorkspacesByUserID method")
//             },
//             LogoutFromChannelFunc: func(userID uint64, channelID uint64) error {
// 	               panic("mock out the LogoutFromChannel method")
//             },
//             LogoutFromWorkspaceFunc: func(userID uint64, workspaceID uint64) error {
// 	               panic("mock out the LogoutFromWorkspace method")
//             },
//             PutChatFunc: func(Chat *models.Chat) (uint64, error) {
// 	               panic("mock out the PutChat method")
//             },
//         }
//
//         // use mockedChatsUseCase in code that requires ChatsUseCase
//         // and then make assertions.
//
//     }
type ChatsUseCaseMock struct {
	// CheckChatPermissionFunc mocks the CheckChatPermission method.
	CheckChatPermissionFunc func(userID uint64, chatID uint64) (bool, error)

	// ContainsFunc mocks the Contains method.
	ContainsFunc func(Chat models.Chat) error

	// CreateChannelFunc mocks the CreateChannel method.
	CreateChannelFunc func(channel *models.Channel) (uint64, error)

	// CreateWorkspaceFunc mocks the CreateWorkspace method.
	CreateWorkspaceFunc func(room *models.Workspace) (uint64, error)

	// DeleteChannelFunc mocks the DeleteChannel method.
	DeleteChannelFunc func(userID uint64, channelID uint64) error

	// DeleteChatFunc mocks the DeleteChat method.
	DeleteChatFunc func(userID uint64, chatId uint64) error

	// DeleteWorkspaceFunc mocks the DeleteWorkspace method.
	DeleteWorkspaceFunc func(userID uint64, workspaceID uint64) error

	// EditChannelFunc mocks the EditChannel method.
	EditChannelFunc func(userID uint64, channel *models.Channel) error

	// EditWorkspaceFunc mocks the EditWorkspace method.
	EditWorkspaceFunc func(userID uint64, room *models.Workspace) error

	// GetChannelByIDFunc mocks the GetChannelByID method.
	GetChannelByIDFunc func(userID uint64, ID uint64) (models.Channel, error)

	// GetChatByIDFunc mocks the GetChatByID method.
	GetChatByIDFunc func(userID uint64, ID uint64) (models.Chat, error)

	// GetChatsByUserIDFunc mocks the GetChatsByUserID method.
	GetChatsByUserIDFunc func(ID uint64) ([]models.Chat, error)

	// GetWorkspaceByIDFunc mocks the GetWorkspaceByID method.
	GetWorkspaceByIDFunc func(userID uint64, ID uint64) (models.Workspace, error)

	// GetWorkspacesByUserIDFunc mocks the GetWorkspacesByUserID method.
	GetWorkspacesByUserIDFunc func(ID uint64) ([]models.Workspace, error)

	// LogoutFromChannelFunc mocks the LogoutFromChannel method.
	LogoutFromChannelFunc func(userID uint64, channelID uint64) error

	// LogoutFromWorkspaceFunc mocks the LogoutFromWorkspace method.
	LogoutFromWorkspaceFunc func(userID uint64, workspaceID uint64) error

	// PutChatFunc mocks the PutChat method.
	PutChatFunc func(Chat *models.Chat) (uint64, error)

	// calls tracks calls to the methods.
	calls struct {
		// CheckChatPermission holds details about calls to the CheckChatPermission method.
		CheckChatPermission []struct {
			// UserID is the userID argument value.
			UserID uint64
			// ChatID is the chatID argument value.
			ChatID uint64
		}
		// Contains holds details about calls to the Contains method.
		Contains []struct {
			// Chat is the Chat argument value.
			Chat models.Chat
		}
		// CreateChannel holds details about calls to the CreateChannel method.
		CreateChannel []struct {
			// Channel is the channel argument value.
			Channel *models.Channel
		}
		// CreateWorkspace holds details about calls to the CreateWorkspace method.
		CreateWorkspace []struct {
			// Room is the room argument value.
			Room *models.Workspace
		}
		// DeleteChannel holds details about calls to the DeleteChannel method.
		DeleteChannel []struct {
			// UserID is the userID argument value.
			UserID uint64
			// ChannelID is the channelID argument value.
			ChannelID uint64
		}
		// DeleteChat holds details about calls to the DeleteChat method.
		DeleteChat []struct {
			// UserID is the userID argument value.
			UserID uint64
			// ChatId is the chatId argument value.
			ChatId uint64
		}
		// DeleteWorkspace holds details about calls to the DeleteWorkspace method.
		DeleteWorkspace []struct {
			// UserID is the userID argument value.
			UserID uint64
			// WorkspaceID is the workspaceID argument value.
			WorkspaceID uint64
		}
		// EditChannel holds details about calls to the EditChannel method.
		EditChannel []struct {
			// UserID is the userID argument value.
			UserID uint64
			// Channel is the channel argument value.
			Channel *models.Channel
		}
		// EditWorkspace holds details about calls to the EditWorkspace method.
		EditWorkspace []struct {
			// UserID is the userID argument value.
			UserID uint64
			// Room is the room argument value.
			Room *models.Workspace
		}
		// GetChannelByID holds details about calls to the GetChannelByID method.
		GetChannelByID []struct {
			// UserID is the userID argument value.
			UserID uint64
			// ID is the ID argument value.
			ID uint64
		}
		// GetChatByID holds details about calls to the GetChatByID method.
		GetChatByID []struct {
			// UserID is the userID argument value.
			UserID uint64
			// ID is the ID argument value.
			ID uint64
		}
		// GetChatsByUserID holds details about calls to the GetChatsByUserID method.
		GetChatsByUserID []struct {
			// ID is the ID argument value.
			ID uint64
		}
		// GetWorkspaceByID holds details about calls to the GetWorkspaceByID method.
		GetWorkspaceByID []struct {
			// UserID is the userID argument value.
			UserID uint64
			// ID is the ID argument value.
			ID uint64
		}
		// GetWorkspacesByUserID holds details about calls to the GetWorkspacesByUserID method.
		GetWorkspacesByUserID []struct {
			// ID is the ID argument value.
			ID uint64
		}
		// LogoutFromChannel holds details about calls to the LogoutFromChannel method.
		LogoutFromChannel []struct {
			// UserID is the userID argument value.
			UserID uint64
			// ChannelID is the channelID argument value.
			ChannelID uint64
		}
		// LogoutFromWorkspace holds details about calls to the LogoutFromWorkspace method.
		LogoutFromWorkspace []struct {
			// UserID is the userID argument value.
			UserID uint64
			// WorkspaceID is the workspaceID argument value.
			WorkspaceID uint64
		}
		// PutChat holds details about calls to the PutChat method.
		PutChat []struct {
			// Chat is the Chat argument value.
			Chat *models.Chat
		}
	}
}

// CheckChatPermission calls CheckChatPermissionFunc.
func (mock *ChatsUseCaseMock) CheckChatPermission(userID uint64, chatID uint64) (bool, error) {
	if mock.CheckChatPermissionFunc == nil {
		panic("ChatsUseCaseMock.CheckChatPermissionFunc: method is nil but ChatsUseCase.CheckChatPermission was just called")
	}
	callInfo := struct {
		UserID uint64
		ChatID uint64
	}{
		UserID: userID,
		ChatID: chatID,
	}
	lockChatsUseCaseMockCheckChatPermission.Lock()
	mock.calls.CheckChatPermission = append(mock.calls.CheckChatPermission, callInfo)
	lockChatsUseCaseMockCheckChatPermission.Unlock()
	return mock.CheckChatPermissionFunc(userID, chatID)
}

// CheckChatPermissionCalls gets all the calls that were made to CheckChatPermission.
// Check the length with:
//     len(mockedChatsUseCase.CheckChatPermissionCalls())
func (mock *ChatsUseCaseMock) CheckChatPermissionCalls() []struct {
	UserID uint64
	ChatID uint64
} {
	var calls []struct {
		UserID uint64
		ChatID uint64
	}
	lockChatsUseCaseMockCheckChatPermission.RLock()
	calls = mock.calls.CheckChatPermission
	lockChatsUseCaseMockCheckChatPermission.RUnlock()
	return calls
}

// Contains calls ContainsFunc.
func (mock *ChatsUseCaseMock) Contains(Chat models.Chat) error {
	if mock.ContainsFunc == nil {
		panic("ChatsUseCaseMock.ContainsFunc: method is nil but ChatsUseCase.Contains was just called")
	}
	callInfo := struct {
		Chat models.Chat
	}{
		Chat: Chat,
	}
	lockChatsUseCaseMockContains.Lock()
	mock.calls.Contains = append(mock.calls.Contains, callInfo)
	lockChatsUseCaseMockContains.Unlock()
	return mock.ContainsFunc(Chat)
}

// ContainsCalls gets all the calls that were made to Contains.
// Check the length with:
//     len(mockedChatsUseCase.ContainsCalls())
func (mock *ChatsUseCaseMock) ContainsCalls() []struct {
	Chat models.Chat
} {
	var calls []struct {
		Chat models.Chat
	}
	lockChatsUseCaseMockContains.RLock()
	calls = mock.calls.Contains
	lockChatsUseCaseMockContains.RUnlock()
	return calls
}

// CreateChannel calls CreateChannelFunc.
func (mock *ChatsUseCaseMock) CreateChannel(channel *models.Channel) (uint64, error) {
	if mock.CreateChannelFunc == nil {
		panic("ChatsUseCaseMock.CreateChannelFunc: method is nil but ChatsUseCase.CreateChannel was just called")
	}
	callInfo := struct {
		Channel *models.Channel
	}{
		Channel: channel,
	}
	lockChatsUseCaseMockCreateChannel.Lock()
	mock.calls.CreateChannel = append(mock.calls.CreateChannel, callInfo)
	lockChatsUseCaseMockCreateChannel.Unlock()
	return mock.CreateChannelFunc(channel)
}

// CreateChannelCalls gets all the calls that were made to CreateChannel.
// Check the length with:
//     len(mockedChatsUseCase.CreateChannelCalls())
func (mock *ChatsUseCaseMock) CreateChannelCalls() []struct {
	Channel *models.Channel
} {
	var calls []struct {
		Channel *models.Channel
	}
	lockChatsUseCaseMockCreateChannel.RLock()
	calls = mock.calls.CreateChannel
	lockChatsUseCaseMockCreateChannel.RUnlock()
	return calls
}

// CreateWorkspace calls CreateWorkspaceFunc.
func (mock *ChatsUseCaseMock) CreateWorkspace(room *models.Workspace) (uint64, error) {
	if mock.CreateWorkspaceFunc == nil {
		panic("ChatsUseCaseMock.CreateWorkspaceFunc: method is nil but ChatsUseCase.CreateWorkspace was just called")
	}
	callInfo := struct {
		Room *models.Workspace
	}{
		Room: room,
	}
	lockChatsUseCaseMockCreateWorkspace.Lock()
	mock.calls.CreateWorkspace = append(mock.calls.CreateWorkspace, callInfo)
	lockChatsUseCaseMockCreateWorkspace.Unlock()
	return mock.CreateWorkspaceFunc(room)
}

// CreateWorkspaceCalls gets all the calls that were made to CreateWorkspace.
// Check the length with:
//     len(mockedChatsUseCase.CreateWorkspaceCalls())
func (mock *ChatsUseCaseMock) CreateWorkspaceCalls() []struct {
	Room *models.Workspace
} {
	var calls []struct {
		Room *models.Workspace
	}
	lockChatsUseCaseMockCreateWorkspace.RLock()
	calls = mock.calls.CreateWorkspace
	lockChatsUseCaseMockCreateWorkspace.RUnlock()
	return calls
}

// DeleteChannel calls DeleteChannelFunc.
func (mock *ChatsUseCaseMock) DeleteChannel(userID uint64, channelID uint64) error {
	if mock.DeleteChannelFunc == nil {
		panic("ChatsUseCaseMock.DeleteChannelFunc: method is nil but ChatsUseCase.DeleteChannel was just called")
	}
	callInfo := struct {
		UserID    uint64
		ChannelID uint64
	}{
		UserID:    userID,
		ChannelID: channelID,
	}
	lockChatsUseCaseMockDeleteChannel.Lock()
	mock.calls.DeleteChannel = append(mock.calls.DeleteChannel, callInfo)
	lockChatsUseCaseMockDeleteChannel.Unlock()
	return mock.DeleteChannelFunc(userID, channelID)
}

// DeleteChannelCalls gets all the calls that were made to DeleteChannel.
// Check the length with:
//     len(mockedChatsUseCase.DeleteChannelCalls())
func (mock *ChatsUseCaseMock) DeleteChannelCalls() []struct {
	UserID    uint64
	ChannelID uint64
} {
	var calls []struct {
		UserID    uint64
		ChannelID uint64
	}
	lockChatsUseCaseMockDeleteChannel.RLock()
	calls = mock.calls.DeleteChannel
	lockChatsUseCaseMockDeleteChannel.RUnlock()
	return calls
}

// DeleteChat calls DeleteChatFunc.
func (mock *ChatsUseCaseMock) DeleteChat(userID uint64, chatId uint64) error {
	if mock.DeleteChatFunc == nil {
		panic("ChatsUseCaseMock.DeleteChatFunc: method is nil but ChatsUseCase.DeleteChat was just called")
	}
	callInfo := struct {
		UserID uint64
		ChatId uint64
	}{
		UserID: userID,
		ChatId: chatId,
	}
	lockChatsUseCaseMockDeleteChat.Lock()
	mock.calls.DeleteChat = append(mock.calls.DeleteChat, callInfo)
	lockChatsUseCaseMockDeleteChat.Unlock()
	return mock.DeleteChatFunc(userID, chatId)
}

// DeleteChatCalls gets all the calls that were made to DeleteChat.
// Check the length with:
//     len(mockedChatsUseCase.DeleteChatCalls())
func (mock *ChatsUseCaseMock) DeleteChatCalls() []struct {
	UserID uint64
	ChatId uint64
} {
	var calls []struct {
		UserID uint64
		ChatId uint64
	}
	lockChatsUseCaseMockDeleteChat.RLock()
	calls = mock.calls.DeleteChat
	lockChatsUseCaseMockDeleteChat.RUnlock()
	return calls
}

// DeleteWorkspace calls DeleteWorkspaceFunc.
func (mock *ChatsUseCaseMock) DeleteWorkspace(userID uint64, workspaceID uint64) error {
	if mock.DeleteWorkspaceFunc == nil {
		panic("ChatsUseCaseMock.DeleteWorkspaceFunc: method is nil but ChatsUseCase.DeleteWorkspace was just called")
	}
	callInfo := struct {
		UserID      uint64
		WorkspaceID uint64
	}{
		UserID:      userID,
		WorkspaceID: workspaceID,
	}
	lockChatsUseCaseMockDeleteWorkspace.Lock()
	mock.calls.DeleteWorkspace = append(mock.calls.DeleteWorkspace, callInfo)
	lockChatsUseCaseMockDeleteWorkspace.Unlock()
	return mock.DeleteWorkspaceFunc(userID, workspaceID)
}

// DeleteWorkspaceCalls gets all the calls that were made to DeleteWorkspace.
// Check the length with:
//     len(mockedChatsUseCase.DeleteWorkspaceCalls())
func (mock *ChatsUseCaseMock) DeleteWorkspaceCalls() []struct {
	UserID      uint64
	WorkspaceID uint64
} {
	var calls []struct {
		UserID      uint64
		WorkspaceID uint64
	}
	lockChatsUseCaseMockDeleteWorkspace.RLock()
	calls = mock.calls.DeleteWorkspace
	lockChatsUseCaseMockDeleteWorkspace.RUnlock()
	return calls
}

// EditChannel calls EditChannelFunc.
func (mock *ChatsUseCaseMock) EditChannel(userID uint64, channel *models.Channel) error {
	if mock.EditChannelFunc == nil {
		panic("ChatsUseCaseMock.EditChannelFunc: method is nil but ChatsUseCase.EditChannel was just called")
	}
	callInfo := struct {
		UserID  uint64
		Channel *models.Channel
	}{
		UserID:  userID,
		Channel: channel,
	}
	lockChatsUseCaseMockEditChannel.Lock()
	mock.calls.EditChannel = append(mock.calls.EditChannel, callInfo)
	lockChatsUseCaseMockEditChannel.Unlock()
	return mock.EditChannelFunc(userID, channel)
}

// EditChannelCalls gets all the calls that were made to EditChannel.
// Check the length with:
//     len(mockedChatsUseCase.EditChannelCalls())
func (mock *ChatsUseCaseMock) EditChannelCalls() []struct {
	UserID  uint64
	Channel *models.Channel
} {
	var calls []struct {
		UserID  uint64
		Channel *models.Channel
	}
	lockChatsUseCaseMockEditChannel.RLock()
	calls = mock.calls.EditChannel
	lockChatsUseCaseMockEditChannel.RUnlock()
	return calls
}

// EditWorkspace calls EditWorkspaceFunc.
func (mock *ChatsUseCaseMock) EditWorkspace(userID uint64, room *models.Workspace) error {
	if mock.EditWorkspaceFunc == nil {
		panic("ChatsUseCaseMock.EditWorkspaceFunc: method is nil but ChatsUseCase.EditWorkspace was just called")
	}
	callInfo := struct {
		UserID uint64
		Room   *models.Workspace
	}{
		UserID: userID,
		Room:   room,
	}
	lockChatsUseCaseMockEditWorkspace.Lock()
	mock.calls.EditWorkspace = append(mock.calls.EditWorkspace, callInfo)
	lockChatsUseCaseMockEditWorkspace.Unlock()
	return mock.EditWorkspaceFunc(userID, room)
}

// EditWorkspaceCalls gets all the calls that were made to EditWorkspace.
// Check the length with:
//     len(mockedChatsUseCase.EditWorkspaceCalls())
func (mock *ChatsUseCaseMock) EditWorkspaceCalls() []struct {
	UserID uint64
	Room   *models.Workspace
} {
	var calls []struct {
		UserID uint64
		Room   *models.Workspace
	}
	lockChatsUseCaseMockEditWorkspace.RLock()
	calls = mock.calls.EditWorkspace
	lockChatsUseCaseMockEditWorkspace.RUnlock()
	return calls
}

// GetChannelByID calls GetChannelByIDFunc.
func (mock *ChatsUseCaseMock) GetChannelByID(userID uint64, ID uint64) (models.Channel, error) {
	if mock.GetChannelByIDFunc == nil {
		panic("ChatsUseCaseMock.GetChannelByIDFunc: method is nil but ChatsUseCase.GetChannelByID was just called")
	}
	callInfo := struct {
		UserID uint64
		ID     uint64
	}{
		UserID: userID,
		ID:     ID,
	}
	lockChatsUseCaseMockGetChannelByID.Lock()
	mock.calls.GetChannelByID = append(mock.calls.GetChannelByID, callInfo)
	lockChatsUseCaseMockGetChannelByID.Unlock()
	return mock.GetChannelByIDFunc(userID, ID)
}

// GetChannelByIDCalls gets all the calls that were made to GetChannelByID.
// Check the length with:
//     len(mockedChatsUseCase.GetChannelByIDCalls())
func (mock *ChatsUseCaseMock) GetChannelByIDCalls() []struct {
	UserID uint64
	ID     uint64
} {
	var calls []struct {
		UserID uint64
		ID     uint64
	}
	lockChatsUseCaseMockGetChannelByID.RLock()
	calls = mock.calls.GetChannelByID
	lockChatsUseCaseMockGetChannelByID.RUnlock()
	return calls
}

// GetChatByID calls GetChatByIDFunc.
func (mock *ChatsUseCaseMock) GetChatByID(userID uint64, ID uint64) (models.Chat, error) {
	if mock.GetChatByIDFunc == nil {
		panic("ChatsUseCaseMock.GetChatByIDFunc: method is nil but ChatsUseCase.GetChatByID was just called")
	}
	callInfo := struct {
		UserID uint64
		ID     uint64
	}{
		UserID: userID,
		ID:     ID,
	}
	lockChatsUseCaseMockGetChatByID.Lock()
	mock.calls.GetChatByID = append(mock.calls.GetChatByID, callInfo)
	lockChatsUseCaseMockGetChatByID.Unlock()
	return mock.GetChatByIDFunc(userID, ID)
}

// GetChatByIDCalls gets all the calls that were made to GetChatByID.
// Check the length with:
//     len(mockedChatsUseCase.GetChatByIDCalls())
func (mock *ChatsUseCaseMock) GetChatByIDCalls() []struct {
	UserID uint64
	ID     uint64
} {
	var calls []struct {
		UserID uint64
		ID     uint64
	}
	lockChatsUseCaseMockGetChatByID.RLock()
	calls = mock.calls.GetChatByID
	lockChatsUseCaseMockGetChatByID.RUnlock()
	return calls
}

// GetChatsByUserID calls GetChatsByUserIDFunc.
func (mock *ChatsUseCaseMock) GetChatsByUserID(ID uint64) ([]models.Chat, error) {
	if mock.GetChatsByUserIDFunc == nil {
		panic("ChatsUseCaseMock.GetChatsByUserIDFunc: method is nil but ChatsUseCase.GetChatsByUserID was just called")
	}
	callInfo := struct {
		ID uint64
	}{
		ID: ID,
	}
	lockChatsUseCaseMockGetChatsByUserID.Lock()
	mock.calls.GetChatsByUserID = append(mock.calls.GetChatsByUserID, callInfo)
	lockChatsUseCaseMockGetChatsByUserID.Unlock()
	return mock.GetChatsByUserIDFunc(ID)
}

// GetChatsByUserIDCalls gets all the calls that were made to GetChatsByUserID.
// Check the length with:
//     len(mockedChatsUseCase.GetChatsByUserIDCalls())
func (mock *ChatsUseCaseMock) GetChatsByUserIDCalls() []struct {
	ID uint64
} {
	var calls []struct {
		ID uint64
	}
	lockChatsUseCaseMockGetChatsByUserID.RLock()
	calls = mock.calls.GetChatsByUserID
	lockChatsUseCaseMockGetChatsByUserID.RUnlock()
	return calls
}

// GetWorkspaceByID calls GetWorkspaceByIDFunc.
func (mock *ChatsUseCaseMock) GetWorkspaceByID(userID uint64, ID uint64) (models.Workspace, error) {
	if mock.GetWorkspaceByIDFunc == nil {
		panic("ChatsUseCaseMock.GetWorkspaceByIDFunc: method is nil but ChatsUseCase.GetWorkspaceByID was just called")
	}
	callInfo := struct {
		UserID uint64
		ID     uint64
	}{
		UserID: userID,
		ID:     ID,
	}
	lockChatsUseCaseMockGetWorkspaceByID.Lock()
	mock.calls.GetWorkspaceByID = append(mock.calls.GetWorkspaceByID, callInfo)
	lockChatsUseCaseMockGetWorkspaceByID.Unlock()
	return mock.GetWorkspaceByIDFunc(userID, ID)
}

// GetWorkspaceByIDCalls gets all the calls that were made to GetWorkspaceByID.
// Check the length with:
//     len(mockedChatsUseCase.GetWorkspaceByIDCalls())
func (mock *ChatsUseCaseMock) GetWorkspaceByIDCalls() []struct {
	UserID uint64
	ID     uint64
} {
	var calls []struct {
		UserID uint64
		ID     uint64
	}
	lockChatsUseCaseMockGetWorkspaceByID.RLock()
	calls = mock.calls.GetWorkspaceByID
	lockChatsUseCaseMockGetWorkspaceByID.RUnlock()
	return calls
}

// GetWorkspacesByUserID calls GetWorkspacesByUserIDFunc.
func (mock *ChatsUseCaseMock) GetWorkspacesByUserID(ID uint64) ([]models.Workspace, error) {
	if mock.GetWorkspacesByUserIDFunc == nil {
		panic("ChatsUseCaseMock.GetWorkspacesByUserIDFunc: method is nil but ChatsUseCase.GetWorkspacesByUserID was just called")
	}
	callInfo := struct {
		ID uint64
	}{
		ID: ID,
	}
	lockChatsUseCaseMockGetWorkspacesByUserID.Lock()
	mock.calls.GetWorkspacesByUserID = append(mock.calls.GetWorkspacesByUserID, callInfo)
	lockChatsUseCaseMockGetWorkspacesByUserID.Unlock()
	return mock.GetWorkspacesByUserIDFunc(ID)
}

// GetWorkspacesByUserIDCalls gets all the calls that were made to GetWorkspacesByUserID.
// Check the length with:
//     len(mockedChatsUseCase.GetWorkspacesByUserIDCalls())
func (mock *ChatsUseCaseMock) GetWorkspacesByUserIDCalls() []struct {
	ID uint64
} {
	var calls []struct {
		ID uint64
	}
	lockChatsUseCaseMockGetWorkspacesByUserID.RLock()
	calls = mock.calls.GetWorkspacesByUserID
	lockChatsUseCaseMockGetWorkspacesByUserID.RUnlock()
	return calls
}

// LogoutFromChannel calls LogoutFromChannelFunc.
func (mock *ChatsUseCaseMock) LogoutFromChannel(userID uint64, channelID uint64) error {
	if mock.LogoutFromChannelFunc == nil {
		panic("ChatsUseCaseMock.LogoutFromChannelFunc: method is nil but ChatsUseCase.LogoutFromChannel was just called")
	}
	callInfo := struct {
		UserID    uint64
		ChannelID uint64
	}{
		UserID:    userID,
		ChannelID: channelID,
	}
	lockChatsUseCaseMockLogoutFromChannel.Lock()
	mock.calls.LogoutFromChannel = append(mock.calls.LogoutFromChannel, callInfo)
	lockChatsUseCaseMockLogoutFromChannel.Unlock()
	return mock.LogoutFromChannelFunc(userID, channelID)
}

// LogoutFromChannelCalls gets all the calls that were made to LogoutFromChannel.
// Check the length with:
//     len(mockedChatsUseCase.LogoutFromChannelCalls())
func (mock *ChatsUseCaseMock) LogoutFromChannelCalls() []struct {
	UserID    uint64
	ChannelID uint64
} {
	var calls []struct {
		UserID    uint64
		ChannelID uint64
	}
	lockChatsUseCaseMockLogoutFromChannel.RLock()
	calls = mock.calls.LogoutFromChannel
	lockChatsUseCaseMockLogoutFromChannel.RUnlock()
	return calls
}

// LogoutFromWorkspace calls LogoutFromWorkspaceFunc.
func (mock *ChatsUseCaseMock) LogoutFromWorkspace(userID uint64, workspaceID uint64) error {
	if mock.LogoutFromWorkspaceFunc == nil {
		panic("ChatsUseCaseMock.LogoutFromWorkspaceFunc: method is nil but ChatsUseCase.LogoutFromWorkspace was just called")
	}
	callInfo := struct {
		UserID      uint64
		WorkspaceID uint64
	}{
		UserID:      userID,
		WorkspaceID: workspaceID,
	}
	lockChatsUseCaseMockLogoutFromWorkspace.Lock()
	mock.calls.LogoutFromWorkspace = append(mock.calls.LogoutFromWorkspace, callInfo)
	lockChatsUseCaseMockLogoutFromWorkspace.Unlock()
	return mock.LogoutFromWorkspaceFunc(userID, workspaceID)
}

// LogoutFromWorkspaceCalls gets all the calls that were made to LogoutFromWorkspace.
// Check the length with:
//     len(mockedChatsUseCase.LogoutFromWorkspaceCalls())
func (mock *ChatsUseCaseMock) LogoutFromWorkspaceCalls() []struct {
	UserID      uint64
	WorkspaceID uint64
} {
	var calls []struct {
		UserID      uint64
		WorkspaceID uint64
	}
	lockChatsUseCaseMockLogoutFromWorkspace.RLock()
	calls = mock.calls.LogoutFromWorkspace
	lockChatsUseCaseMockLogoutFromWorkspace.RUnlock()
	return calls
}

// PutChat calls PutChatFunc.
func (mock *ChatsUseCaseMock) PutChat(Chat *models.Chat) (uint64, error) {
	if mock.PutChatFunc == nil {
		panic("ChatsUseCaseMock.PutChatFunc: method is nil but ChatsUseCase.PutChat was just called")
	}
	callInfo := struct {
		Chat *models.Chat
	}{
		Chat: Chat,
	}
	lockChatsUseCaseMockPutChat.Lock()
	mock.calls.PutChat = append(mock.calls.PutChat, callInfo)
	lockChatsUseCaseMockPutChat.Unlock()
	return mock.PutChatFunc(Chat)
}

// PutChatCalls gets all the calls that were made to PutChat.
// Check the length with:
//     len(mockedChatsUseCase.PutChatCalls())
func (mock *ChatsUseCaseMock) PutChatCalls() []struct {
	Chat *models.Chat
} {
	var calls []struct {
		Chat *models.Chat
	}
	lockChatsUseCaseMockPutChat.RLock()
	calls = mock.calls.PutChat
	lockChatsUseCaseMockPutChat.RUnlock()
	return calls
}
