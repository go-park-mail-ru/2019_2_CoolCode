// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package repository

import (
	"github.com/go-park-mail-ru/2019_2_CoolCode/models"
	"sync"
)

var (
	lockChatsRepositoryMockContains         sync.RWMutex
	lockChatsRepositoryMockGetChannelByID   sync.RWMutex
	lockChatsRepositoryMockGetChatByID      sync.RWMutex
	lockChatsRepositoryMockGetChats         sync.RWMutex
	lockChatsRepositoryMockGetWorkspaceByID sync.RWMutex
	lockChatsRepositoryMockGetWorkspaces    sync.RWMutex
	lockChatsRepositoryMockPutChannel       sync.RWMutex
	lockChatsRepositoryMockPutChat          sync.RWMutex
	lockChatsRepositoryMockPutWorkspace     sync.RWMutex
	lockChatsRepositoryMockRemoveChannel    sync.RWMutex
	lockChatsRepositoryMockRemoveChat       sync.RWMutex
	lockChatsRepositoryMockRemoveWorkspace  sync.RWMutex
	lockChatsRepositoryMockUpdateChannel    sync.RWMutex
	lockChatsRepositoryMockUpdateWorkspace  sync.RWMutex
)

// Ensure, that ChatsRepositoryMock does implement ChatsRepository.
// If this is not the case, regenerate this file with moq.
var _ ChatsRepository = &ChatsRepositoryMock{}

// ChatsRepositoryMock is a mock implementation of ChatsRepository.
//
//     func TestSomethingThatUsesChatsRepository(t *testing.T) {
//
//         // make and configure a mocked ChatsRepository
//         mockedChatsRepository := &ChatsRepositoryMock{
//             ContainsFunc: func(Chat models.Chat) error {
// 	               panic("mock out the Contains method")
//             },
//             GetChannelByIDFunc: func(channelID uint64) (models.Channel, error) {
// 	               panic("mock out the GetChannelByID method")
//             },
//             GetChatByIDFunc: func(ID uint64) (models.Chat, error) {
// 	               panic("mock out the GetChatByID method")
//             },
//             GetChatsFunc: func(userID uint64) ([]models.Chat, error) {
// 	               panic("mock out the GetChats method")
//             },
//             GetWorkspaceByIDFunc: func(userID uint64) (models.Workspace, error) {
// 	               panic("mock out the GetWorkspaceByID method")
//             },
//             GetWorkspacesFunc: func(userID uint64) ([]models.Workspace, error) {
// 	               panic("mock out the GetWorkspaces method")
//             },
//             PutChannelFunc: func(channel *models.Channel) (uint64, error) {
// 	               panic("mock out the PutChannel method")
//             },
//             PutChatFunc: func(Chat *models.Chat) (uint64, error) {
// 	               panic("mock out the PutChat method")
//             },
//             PutWorkspaceFunc: func(workspace *models.Workspace) (uint64, error) {
// 	               panic("mock out the PutWorkspace method")
//             },
//             RemoveChannelFunc: func(channelID uint64) (int64, error) {
// 	               panic("mock out the RemoveChannel method")
//             },
//             RemoveChatFunc: func(chatID uint64) (int64, error) {
// 	               panic("mock out the RemoveChat method")
//             },
//             RemoveWorkspaceFunc: func(workspaceID uint64) (int64, error) {
// 	               panic("mock out the RemoveWorkspace method")
//             },
//             UpdateChannelFunc: func(channel *models.Channel) error {
// 	               panic("mock out the UpdateChannel method")
//             },
//             UpdateWorkspaceFunc: func(workspace *models.Workspace) error {
// 	               panic("mock out the UpdateWorkspace method")
//             },
//         }
//
//         // use mockedChatsRepository in code that requires ChatsRepository
//         // and then make assertions.
//
//     }
type ChatsRepositoryMock struct {
	// ContainsFunc mocks the Contains method.
	ContainsFunc func(Chat models.Chat) error

	// GetChannelByIDFunc mocks the GetChannelByID method.
	GetChannelByIDFunc func(channelID uint64) (models.Channel, error)

	// GetChatByIDFunc mocks the GetChatByID method.
	GetChatByIDFunc func(ID uint64) (models.Chat, error)

	// GetChatsFunc mocks the GetChats method.
	GetChatsFunc func(userID uint64) ([]models.Chat, error)

	// GetWorkspaceByIDFunc mocks the GetWorkspaceByID method.
	GetWorkspaceByIDFunc func(userID uint64) (models.Workspace, error)

	// GetWorkspacesFunc mocks the GetWorkspaces method.
	GetWorkspacesFunc func(userID uint64) ([]models.Workspace, error)

	// PutChannelFunc mocks the PutChannel method.
	PutChannelFunc func(channel *models.Channel) (uint64, error)

	// PutChatFunc mocks the PutChat method.
	PutChatFunc func(Chat *models.Chat) (uint64, error)

	// PutWorkspaceFunc mocks the PutWorkspace method.
	PutWorkspaceFunc func(workspace *models.Workspace) (uint64, error)

	// RemoveChannelFunc mocks the RemoveChannel method.
	RemoveChannelFunc func(channelID uint64) (int64, error)

	// RemoveChatFunc mocks the RemoveChat method.
	RemoveChatFunc func(chatID uint64) (int64, error)

	// RemoveWorkspaceFunc mocks the RemoveWorkspace method.
	RemoveWorkspaceFunc func(workspaceID uint64) (int64, error)

	// UpdateChannelFunc mocks the UpdateChannel method.
	UpdateChannelFunc func(channel *models.Channel) error

	// UpdateWorkspaceFunc mocks the UpdateWorkspace method.
	UpdateWorkspaceFunc func(workspace *models.Workspace) error

	// calls tracks calls to the methods.
	calls struct {
		// Contains holds details about calls to the Contains method.
		Contains []struct {
			// Chat is the Chat argument value.
			Chat models.Chat
		}
		// GetChannelByID holds details about calls to the GetChannelByID method.
		GetChannelByID []struct {
			// ChannelID is the channelID argument value.
			ChannelID uint64
		}
		// GetChatByID holds details about calls to the GetChatByID method.
		GetChatByID []struct {
			// ID is the ID argument value.
			ID uint64
		}
		// GetChats holds details about calls to the GetChats method.
		GetChats []struct {
			// UserID is the userID argument value.
			UserID uint64
		}
		// GetWorkspaceByID holds details about calls to the GetWorkspaceByID method.
		GetWorkspaceByID []struct {
			// UserID is the userID argument value.
			UserID uint64
		}
		// GetWorkspaces holds details about calls to the GetWorkspaces method.
		GetWorkspaces []struct {
			// UserID is the userID argument value.
			UserID uint64
		}
		// PutChannel holds details about calls to the PutChannel method.
		PutChannel []struct {
			// Channel is the channel argument value.
			Channel *models.Channel
		}
		// PutChat holds details about calls to the PutChat method.
		PutChat []struct {
			// Chat is the Chat argument value.
			Chat *models.Chat
		}
		// PutWorkspace holds details about calls to the PutWorkspace method.
		PutWorkspace []struct {
			// Workspace is the workspace argument value.
			Workspace *models.Workspace
		}
		// RemoveChannel holds details about calls to the RemoveChannel method.
		RemoveChannel []struct {
			// ChannelID is the channelID argument value.
			ChannelID uint64
		}
		// RemoveChat holds details about calls to the RemoveChat method.
		RemoveChat []struct {
			// ChatID is the chatID argument value.
			ChatID uint64
		}
		// RemoveWorkspace holds details about calls to the RemoveWorkspace method.
		RemoveWorkspace []struct {
			// WorkspaceID is the workspaceID argument value.
			WorkspaceID uint64
		}
		// UpdateChannel holds details about calls to the UpdateChannel method.
		UpdateChannel []struct {
			// Channel is the channel argument value.
			Channel *models.Channel
		}
		// UpdateWorkspace holds details about calls to the UpdateWorkspace method.
		UpdateWorkspace []struct {
			// Workspace is the workspace argument value.
			Workspace *models.Workspace
		}
	}
}

// Contains calls ContainsFunc.
func (mock *ChatsRepositoryMock) Contains(Chat models.Chat) error {
	if mock.ContainsFunc == nil {
		panic("ChatsRepositoryMock.ContainsFunc: method is nil but ChatsRepository.Contains was just called")
	}
	callInfo := struct {
		Chat models.Chat
	}{
		Chat: Chat,
	}
	lockChatsRepositoryMockContains.Lock()
	mock.calls.Contains = append(mock.calls.Contains, callInfo)
	lockChatsRepositoryMockContains.Unlock()
	return mock.ContainsFunc(Chat)
}

// ContainsCalls gets all the calls that were made to Contains.
// Check the length with:
//     len(mockedChatsRepository.ContainsCalls())
func (mock *ChatsRepositoryMock) ContainsCalls() []struct {
	Chat models.Chat
} {
	var calls []struct {
		Chat models.Chat
	}
	lockChatsRepositoryMockContains.RLock()
	calls = mock.calls.Contains
	lockChatsRepositoryMockContains.RUnlock()
	return calls
}

// GetChannelByID calls GetChannelByIDFunc.
func (mock *ChatsRepositoryMock) GetChannelByID(channelID uint64) (models.Channel, error) {
	if mock.GetChannelByIDFunc == nil {
		panic("ChatsRepositoryMock.GetChannelByIDFunc: method is nil but ChatsRepository.GetChannelByID was just called")
	}
	callInfo := struct {
		ChannelID uint64
	}{
		ChannelID: channelID,
	}
	lockChatsRepositoryMockGetChannelByID.Lock()
	mock.calls.GetChannelByID = append(mock.calls.GetChannelByID, callInfo)
	lockChatsRepositoryMockGetChannelByID.Unlock()
	return mock.GetChannelByIDFunc(channelID)
}

// GetChannelByIDCalls gets all the calls that were made to GetChannelByID.
// Check the length with:
//     len(mockedChatsRepository.GetChannelByIDCalls())
func (mock *ChatsRepositoryMock) GetChannelByIDCalls() []struct {
	ChannelID uint64
} {
	var calls []struct {
		ChannelID uint64
	}
	lockChatsRepositoryMockGetChannelByID.RLock()
	calls = mock.calls.GetChannelByID
	lockChatsRepositoryMockGetChannelByID.RUnlock()
	return calls
}

// GetChatByID calls GetChatByIDFunc.
func (mock *ChatsRepositoryMock) GetChatByID(ID uint64) (models.Chat, error) {
	if mock.GetChatByIDFunc == nil {
		panic("ChatsRepositoryMock.GetChatByIDFunc: method is nil but ChatsRepository.GetChatByID was just called")
	}
	callInfo := struct {
		ID uint64
	}{
		ID: ID,
	}
	lockChatsRepositoryMockGetChatByID.Lock()
	mock.calls.GetChatByID = append(mock.calls.GetChatByID, callInfo)
	lockChatsRepositoryMockGetChatByID.Unlock()
	return mock.GetChatByIDFunc(ID)
}

// GetChatByIDCalls gets all the calls that were made to GetChatByID.
// Check the length with:
//     len(mockedChatsRepository.GetChatByIDCalls())
func (mock *ChatsRepositoryMock) GetChatByIDCalls() []struct {
	ID uint64
} {
	var calls []struct {
		ID uint64
	}
	lockChatsRepositoryMockGetChatByID.RLock()
	calls = mock.calls.GetChatByID
	lockChatsRepositoryMockGetChatByID.RUnlock()
	return calls
}

// GetChats calls GetChatsFunc.
func (mock *ChatsRepositoryMock) GetChats(userID uint64) ([]models.Chat, error) {
	if mock.GetChatsFunc == nil {
		panic("ChatsRepositoryMock.GetChatsFunc: method is nil but ChatsRepository.GetChats was just called")
	}
	callInfo := struct {
		UserID uint64
	}{
		UserID: userID,
	}
	lockChatsRepositoryMockGetChats.Lock()
	mock.calls.GetChats = append(mock.calls.GetChats, callInfo)
	lockChatsRepositoryMockGetChats.Unlock()
	return mock.GetChatsFunc(userID)
}

// GetChatsCalls gets all the calls that were made to GetChats.
// Check the length with:
//     len(mockedChatsRepository.GetChatsCalls())
func (mock *ChatsRepositoryMock) GetChatsCalls() []struct {
	UserID uint64
} {
	var calls []struct {
		UserID uint64
	}
	lockChatsRepositoryMockGetChats.RLock()
	calls = mock.calls.GetChats
	lockChatsRepositoryMockGetChats.RUnlock()
	return calls
}

// GetWorkspaceByID calls GetWorkspaceByIDFunc.
func (mock *ChatsRepositoryMock) GetWorkspaceByID(userID uint64) (models.Workspace, error) {
	if mock.GetWorkspaceByIDFunc == nil {
		panic("ChatsRepositoryMock.GetWorkspaceByIDFunc: method is nil but ChatsRepository.GetWorkspaceByID was just called")
	}
	callInfo := struct {
		UserID uint64
	}{
		UserID: userID,
	}
	lockChatsRepositoryMockGetWorkspaceByID.Lock()
	mock.calls.GetWorkspaceByID = append(mock.calls.GetWorkspaceByID, callInfo)
	lockChatsRepositoryMockGetWorkspaceByID.Unlock()
	return mock.GetWorkspaceByIDFunc(userID)
}

// GetWorkspaceByIDCalls gets all the calls that were made to GetWorkspaceByID.
// Check the length with:
//     len(mockedChatsRepository.GetWorkspaceByIDCalls())
func (mock *ChatsRepositoryMock) GetWorkspaceByIDCalls() []struct {
	UserID uint64
} {
	var calls []struct {
		UserID uint64
	}
	lockChatsRepositoryMockGetWorkspaceByID.RLock()
	calls = mock.calls.GetWorkspaceByID
	lockChatsRepositoryMockGetWorkspaceByID.RUnlock()
	return calls
}

// GetWorkspaces calls GetWorkspacesFunc.
func (mock *ChatsRepositoryMock) GetWorkspaces(userID uint64) ([]models.Workspace, error) {
	if mock.GetWorkspacesFunc == nil {
		panic("ChatsRepositoryMock.GetWorkspacesFunc: method is nil but ChatsRepository.GetWorkspaces was just called")
	}
	callInfo := struct {
		UserID uint64
	}{
		UserID: userID,
	}
	lockChatsRepositoryMockGetWorkspaces.Lock()
	mock.calls.GetWorkspaces = append(mock.calls.GetWorkspaces, callInfo)
	lockChatsRepositoryMockGetWorkspaces.Unlock()
	return mock.GetWorkspacesFunc(userID)
}

// GetWorkspacesCalls gets all the calls that were made to GetWorkspaces.
// Check the length with:
//     len(mockedChatsRepository.GetWorkspacesCalls())
func (mock *ChatsRepositoryMock) GetWorkspacesCalls() []struct {
	UserID uint64
} {
	var calls []struct {
		UserID uint64
	}
	lockChatsRepositoryMockGetWorkspaces.RLock()
	calls = mock.calls.GetWorkspaces
	lockChatsRepositoryMockGetWorkspaces.RUnlock()
	return calls
}

// PutChannel calls PutChannelFunc.
func (mock *ChatsRepositoryMock) PutChannel(channel *models.Channel) (uint64, error) {
	if mock.PutChannelFunc == nil {
		panic("ChatsRepositoryMock.PutChannelFunc: method is nil but ChatsRepository.PutChannel was just called")
	}
	callInfo := struct {
		Channel *models.Channel
	}{
		Channel: channel,
	}
	lockChatsRepositoryMockPutChannel.Lock()
	mock.calls.PutChannel = append(mock.calls.PutChannel, callInfo)
	lockChatsRepositoryMockPutChannel.Unlock()
	return mock.PutChannelFunc(channel)
}

// PutChannelCalls gets all the calls that were made to PutChannel.
// Check the length with:
//     len(mockedChatsRepository.PutChannelCalls())
func (mock *ChatsRepositoryMock) PutChannelCalls() []struct {
	Channel *models.Channel
} {
	var calls []struct {
		Channel *models.Channel
	}
	lockChatsRepositoryMockPutChannel.RLock()
	calls = mock.calls.PutChannel
	lockChatsRepositoryMockPutChannel.RUnlock()
	return calls
}

// PutChat calls PutChatFunc.
func (mock *ChatsRepositoryMock) PutChat(Chat *models.Chat) (uint64, error) {
	if mock.PutChatFunc == nil {
		panic("ChatsRepositoryMock.PutChatFunc: method is nil but ChatsRepository.PutChat was just called")
	}
	callInfo := struct {
		Chat *models.Chat
	}{
		Chat: Chat,
	}
	lockChatsRepositoryMockPutChat.Lock()
	mock.calls.PutChat = append(mock.calls.PutChat, callInfo)
	lockChatsRepositoryMockPutChat.Unlock()
	return mock.PutChatFunc(Chat)
}

// PutChatCalls gets all the calls that were made to PutChat.
// Check the length with:
//     len(mockedChatsRepository.PutChatCalls())
func (mock *ChatsRepositoryMock) PutChatCalls() []struct {
	Chat *models.Chat
} {
	var calls []struct {
		Chat *models.Chat
	}
	lockChatsRepositoryMockPutChat.RLock()
	calls = mock.calls.PutChat
	lockChatsRepositoryMockPutChat.RUnlock()
	return calls
}

// PutWorkspace calls PutWorkspaceFunc.
func (mock *ChatsRepositoryMock) PutWorkspace(workspace *models.Workspace) (uint64, error) {
	if mock.PutWorkspaceFunc == nil {
		panic("ChatsRepositoryMock.PutWorkspaceFunc: method is nil but ChatsRepository.PutWorkspace was just called")
	}
	callInfo := struct {
		Workspace *models.Workspace
	}{
		Workspace: workspace,
	}
	lockChatsRepositoryMockPutWorkspace.Lock()
	mock.calls.PutWorkspace = append(mock.calls.PutWorkspace, callInfo)
	lockChatsRepositoryMockPutWorkspace.Unlock()
	return mock.PutWorkspaceFunc(workspace)
}

// PutWorkspaceCalls gets all the calls that were made to PutWorkspace.
// Check the length with:
//     len(mockedChatsRepository.PutWorkspaceCalls())
func (mock *ChatsRepositoryMock) PutWorkspaceCalls() []struct {
	Workspace *models.Workspace
} {
	var calls []struct {
		Workspace *models.Workspace
	}
	lockChatsRepositoryMockPutWorkspace.RLock()
	calls = mock.calls.PutWorkspace
	lockChatsRepositoryMockPutWorkspace.RUnlock()
	return calls
}

// RemoveChannel calls RemoveChannelFunc.
func (mock *ChatsRepositoryMock) RemoveChannel(channelID uint64) (int64, error) {
	if mock.RemoveChannelFunc == nil {
		panic("ChatsRepositoryMock.RemoveChannelFunc: method is nil but ChatsRepository.RemoveChannel was just called")
	}
	callInfo := struct {
		ChannelID uint64
	}{
		ChannelID: channelID,
	}
	lockChatsRepositoryMockRemoveChannel.Lock()
	mock.calls.RemoveChannel = append(mock.calls.RemoveChannel, callInfo)
	lockChatsRepositoryMockRemoveChannel.Unlock()
	return mock.RemoveChannelFunc(channelID)
}

// RemoveChannelCalls gets all the calls that were made to RemoveChannel.
// Check the length with:
//     len(mockedChatsRepository.RemoveChannelCalls())
func (mock *ChatsRepositoryMock) RemoveChannelCalls() []struct {
	ChannelID uint64
} {
	var calls []struct {
		ChannelID uint64
	}
	lockChatsRepositoryMockRemoveChannel.RLock()
	calls = mock.calls.RemoveChannel
	lockChatsRepositoryMockRemoveChannel.RUnlock()
	return calls
}

// RemoveChat calls RemoveChatFunc.
func (mock *ChatsRepositoryMock) RemoveChat(chatID uint64) (int64, error) {
	if mock.RemoveChatFunc == nil {
		panic("ChatsRepositoryMock.RemoveChatFunc: method is nil but ChatsRepository.RemoveChat was just called")
	}
	callInfo := struct {
		ChatID uint64
	}{
		ChatID: chatID,
	}
	lockChatsRepositoryMockRemoveChat.Lock()
	mock.calls.RemoveChat = append(mock.calls.RemoveChat, callInfo)
	lockChatsRepositoryMockRemoveChat.Unlock()
	return mock.RemoveChatFunc(chatID)
}

// RemoveChatCalls gets all the calls that were made to RemoveChat.
// Check the length with:
//     len(mockedChatsRepository.RemoveChatCalls())
func (mock *ChatsRepositoryMock) RemoveChatCalls() []struct {
	ChatID uint64
} {
	var calls []struct {
		ChatID uint64
	}
	lockChatsRepositoryMockRemoveChat.RLock()
	calls = mock.calls.RemoveChat
	lockChatsRepositoryMockRemoveChat.RUnlock()
	return calls
}

// RemoveWorkspace calls RemoveWorkspaceFunc.
func (mock *ChatsRepositoryMock) RemoveWorkspace(workspaceID uint64) (int64, error) {
	if mock.RemoveWorkspaceFunc == nil {
		panic("ChatsRepositoryMock.RemoveWorkspaceFunc: method is nil but ChatsRepository.RemoveWorkspace was just called")
	}
	callInfo := struct {
		WorkspaceID uint64
	}{
		WorkspaceID: workspaceID,
	}
	lockChatsRepositoryMockRemoveWorkspace.Lock()
	mock.calls.RemoveWorkspace = append(mock.calls.RemoveWorkspace, callInfo)
	lockChatsRepositoryMockRemoveWorkspace.Unlock()
	return mock.RemoveWorkspaceFunc(workspaceID)
}

// RemoveWorkspaceCalls gets all the calls that were made to RemoveWorkspace.
// Check the length with:
//     len(mockedChatsRepository.RemoveWorkspaceCalls())
func (mock *ChatsRepositoryMock) RemoveWorkspaceCalls() []struct {
	WorkspaceID uint64
} {
	var calls []struct {
		WorkspaceID uint64
	}
	lockChatsRepositoryMockRemoveWorkspace.RLock()
	calls = mock.calls.RemoveWorkspace
	lockChatsRepositoryMockRemoveWorkspace.RUnlock()
	return calls
}

// UpdateChannel calls UpdateChannelFunc.
func (mock *ChatsRepositoryMock) UpdateChannel(channel *models.Channel) error {
	if mock.UpdateChannelFunc == nil {
		panic("ChatsRepositoryMock.UpdateChannelFunc: method is nil but ChatsRepository.UpdateChannel was just called")
	}
	callInfo := struct {
		Channel *models.Channel
	}{
		Channel: channel,
	}
	lockChatsRepositoryMockUpdateChannel.Lock()
	mock.calls.UpdateChannel = append(mock.calls.UpdateChannel, callInfo)
	lockChatsRepositoryMockUpdateChannel.Unlock()
	return mock.UpdateChannelFunc(channel)
}

// UpdateChannelCalls gets all the calls that were made to UpdateChannel.
// Check the length with:
//     len(mockedChatsRepository.UpdateChannelCalls())
func (mock *ChatsRepositoryMock) UpdateChannelCalls() []struct {
	Channel *models.Channel
} {
	var calls []struct {
		Channel *models.Channel
	}
	lockChatsRepositoryMockUpdateChannel.RLock()
	calls = mock.calls.UpdateChannel
	lockChatsRepositoryMockUpdateChannel.RUnlock()
	return calls
}

// UpdateWorkspace calls UpdateWorkspaceFunc.
func (mock *ChatsRepositoryMock) UpdateWorkspace(workspace *models.Workspace) error {
	if mock.UpdateWorkspaceFunc == nil {
		panic("ChatsRepositoryMock.UpdateWorkspaceFunc: method is nil but ChatsRepository.UpdateWorkspace was just called")
	}
	callInfo := struct {
		Workspace *models.Workspace
	}{
		Workspace: workspace,
	}
	lockChatsRepositoryMockUpdateWorkspace.Lock()
	mock.calls.UpdateWorkspace = append(mock.calls.UpdateWorkspace, callInfo)
	lockChatsRepositoryMockUpdateWorkspace.Unlock()
	return mock.UpdateWorkspaceFunc(workspace)
}

// UpdateWorkspaceCalls gets all the calls that were made to UpdateWorkspace.
// Check the length with:
//     len(mockedChatsRepository.UpdateWorkspaceCalls())
func (mock *ChatsRepositoryMock) UpdateWorkspaceCalls() []struct {
	Workspace *models.Workspace
} {
	var calls []struct {
		Workspace *models.Workspace
	}
	lockChatsRepositoryMockUpdateWorkspace.RLock()
	calls = mock.calls.UpdateWorkspace
	lockChatsRepositoryMockUpdateWorkspace.RUnlock()
	return calls
}
