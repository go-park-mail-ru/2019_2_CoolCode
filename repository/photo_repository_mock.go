// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package repository

import (
	"mime/multipart"
	"os"
	"sync"
)

var (
	lockPhotoRepositoryMockGetPhoto  sync.RWMutex
	lockPhotoRepositoryMockSavePhoto sync.RWMutex
)

// Ensure, that PhotoRepositoryMock does implement PhotoRepository.
// If this is not the case, regenerate this file with moq.
var _ PhotoRepository = &PhotoRepositoryMock{}

// PhotoRepositoryMock is a mock implementation of PhotoRepository.
//
//     func TestSomethingThatUsesPhotoRepository(t *testing.T) {
//
//         // make and configure a mocked PhotoRepository
//         mockedPhotoRepository := &PhotoRepositoryMock{
//             GetPhotoFunc: func(id int) (*os.File, error) {
// 	               panic("mock out the GetPhoto method")
//             },
//             SavePhotoFunc: func(file multipart.File, id string) error {
// 	               panic("mock out the SavePhoto method")
//             },
//         }
//
//         // use mockedPhotoRepository in code that requires PhotoRepository
//         // and then make assertions.
//
//     }
type PhotoRepositoryMock struct {
	// GetPhotoFunc mocks the GetPhoto method.
	GetPhotoFunc func(id int) (*os.File, error)

	// SavePhotoFunc mocks the SavePhoto method.
	SavePhotoFunc func(file multipart.File, id string) error

	// calls tracks calls to the methods.
	calls struct {
		// GetPhoto holds details about calls to the GetPhoto method.
		GetPhoto []struct {
			// ID is the id argument value.
			ID int
		}
		// SavePhoto holds details about calls to the SavePhoto method.
		SavePhoto []struct {
			// File is the file argument value.
			File multipart.File
			// ID is the id argument value.
			ID string
		}
	}
}

// GetPhoto calls GetPhotoFunc.
func (mock *PhotoRepositoryMock) GetPhoto(id int) (*os.File, error) {
	if mock.GetPhotoFunc == nil {
		panic("PhotoRepositoryMock.GetPhotoFunc: method is nil but PhotoRepository.GetPhoto was just called")
	}
	callInfo := struct {
		ID int
	}{
		ID: id,
	}
	lockPhotoRepositoryMockGetPhoto.Lock()
	mock.calls.GetPhoto = append(mock.calls.GetPhoto, callInfo)
	lockPhotoRepositoryMockGetPhoto.Unlock()
	return mock.GetPhotoFunc(id)
}

// GetPhotoCalls gets all the calls that were made to GetPhoto.
// Check the length with:
//     len(mockedPhotoRepository.GetPhotoCalls())
func (mock *PhotoRepositoryMock) GetPhotoCalls() []struct {
	ID int
} {
	var calls []struct {
		ID int
	}
	lockPhotoRepositoryMockGetPhoto.RLock()
	calls = mock.calls.GetPhoto
	lockPhotoRepositoryMockGetPhoto.RUnlock()
	return calls
}

// SavePhoto calls SavePhotoFunc.
func (mock *PhotoRepositoryMock) SavePhoto(file multipart.File, id string) error {
	if mock.SavePhotoFunc == nil {
		panic("PhotoRepositoryMock.SavePhotoFunc: method is nil but PhotoRepository.SavePhoto was just called")
	}
	callInfo := struct {
		File multipart.File
		ID   string
	}{
		File: file,
		ID:   id,
	}
	lockPhotoRepositoryMockSavePhoto.Lock()
	mock.calls.SavePhoto = append(mock.calls.SavePhoto, callInfo)
	lockPhotoRepositoryMockSavePhoto.Unlock()
	return mock.SavePhotoFunc(file, id)
}

// SavePhotoCalls gets all the calls that were made to SavePhoto.
// Check the length with:
//     len(mockedPhotoRepository.SavePhotoCalls())
func (mock *PhotoRepositoryMock) SavePhotoCalls() []struct {
	File multipart.File
	ID   string
} {
	var calls []struct {
		File multipart.File
		ID   string
	}
	lockPhotoRepositoryMockSavePhoto.RLock()
	calls = mock.calls.SavePhoto
	lockPhotoRepositoryMockSavePhoto.RUnlock()
	return calls
}
